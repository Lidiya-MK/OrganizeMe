// Function to get the user ID from the URL
function getUserId() {
    const urlParts = window.location.pathname.split('/');
    return urlParts[urlParts.length - 1]; // Assuming the user ID is the last part of the URL
}

// Function to get the authentication token (assumed to be stored in local storage)
function getAuthToken() {
    return localStorage.getItem('authToken'); // Adjust this based on where you store the token
}

// Function to fetch tasks for a specific day
async function fetchTasks(day) {
    const userId = getUserId();
    const response = await fetch(`http://localhost:5000/organize/users/tasks/${userId}?day=${day}`, {
        method: 'GET',
        headers: {
            'Authorization': `Bearer ${getAuthToken()}`, // Add the token to the header
            'Content-Type': 'application/json'
        }
    });

    if (response.ok) {
        const tasks = await response.json();
        displayTasks(tasks);
    } else {
        console.error('Failed to fetch tasks');
    }
}

// Function to display tasks in the list
function displayTasks(tasks) {
    const taskList = document.getElementById('taskList');
    taskList.innerHTML = ''; // Clear existing tasks

    tasks.forEach(task => {
        const listItem = document.createElement('li');
        listItem.classList.add('list-group-item');
        listItem.id = task._id; // Set the ID for easy reference

        // Set the label style based on isDone
        const labelStyle = task.isDone ? 'line-through' : 'none';

        listItem.innerHTML = `
            <input type="checkbox" class="form-check-input me-2" id="${task._id}" ${task.isDone ? 'checked' : ''}>
            <label for="${task._id}" style="text-decoration: ${labelStyle};">${task.title}</label>
            <div class="action-icons">
                <i class="fas fa-edit" onclick="editTask('${task._id}')"></i>
                <i class="fas fa-trash" onclick="deleteTask('${task._id}')"></i>
                <i class="fas fa-star" style="color: ${task.isImportant ? 'gold' : 'gray'};" onclick="toggleImportant('${task._id}', ${task.isImportant})"></i>
            </div>
        `;
        taskList.appendChild(listItem);
    });

    initTaskActions(); // Initialize the checkbox listeners after displaying tasks
}

// Function to add a new task
async function addTask() {
    const taskInput = document.getElementById('newTaskInput');
    const title = taskInput.value.trim();
    const day = document.getElementById('currentDay').textContent.trim();

    if (!title) return;

    const userId = getUserId();
    const response = await fetch(`http://localhost:5000/organize/users/tasks`, {
        method: 'POST',
        headers: {
            'Authorization': `Bearer ${getAuthToken()}`, // Add the token to the header
            'Content-Type': 'application/json'
        },
        body: JSON.stringify({
            title: title,
            day: day, // Ensure the task has the correct day
            owner: userId
        })
    });

    if (response.ok) {
        taskInput.value = ''; // Clear the input field
        fetchTasks(day); // Refresh the task list for the current day
    } else {
        console.error('Failed to add task');
    }
}

// Function to delete a task
async function deleteTask(taskId) {
    const confirmation = confirm("Are you sure you want to delete this task?"); // Confirm deletion
    if (!confirmation) return;

    const response = await fetch(`http://localhost:5000/organize/users/tasks/${taskId}`, {
        method: 'DELETE',
        headers: {
            'Authorization': `Bearer ${getAuthToken()}`, // Add the token to the header
            'Content-Type': 'application/json'
        }
    });

    if (response.ok) {
        const day = document.getElementById('currentDay').textContent.trim();
        fetchTasks(day); // Refresh the task list for the current day after deletion
    } else {
        console.error('Failed to delete task');
    }
}

// Event listener for adding tasks
document.getElementById('addTaskButton').addEventListener('click', addTask);

// Sidebar item click event
const sidebarItems = document.querySelectorAll('.sidebar-item');
sidebarItems.forEach(item => {
    item.addEventListener('click', function() {
        const newTitle = this.textContent;
        document.getElementById('currentDay').textContent = newTitle; // Update the current day
        fetchTasks(newTitle); // Fetch tasks for the selected day
    });
});

// Initial fetch for tasks on page load
fetchTasks('Monday'); // Load Monday tasks by default

// Edit task functionality (included from updateTask.js)
async function editTask(taskId) {
    const taskTitle = prompt("Edit task title:"); // Prompt for new task title
    if (!taskTitle) return; // Exit if no title is provided

    const response = await fetch(`http://localhost:5000/organize/users/tasks/${taskId}`, {
        method: 'PUT',
        headers: {
            'Authorization': `Bearer ${getAuthToken()}`, // Add the token to the header
            'Content-Type': 'application/json'
        },
        body: JSON.stringify({ title: taskTitle }) // Update only the title
    });

    if (response.ok) {
        const updatedTask = await response.json();
        const day = document.getElementById('currentDay').textContent.trim();
        fetchTasks(day); // Refresh the task list for the current day
    } else {
        console.error('Failed to update task');
    }
}
